#!/usr/bin/python3

import i3
import json
import argparse

def get_current_workspace():
    workspaces = i3.get_workspaces()
    focused = [x for x in workspaces if x['focused']]
    return focused[0]['name']


def get_next_output():
    outputs = i3.get_outputs()
    outputs = [i for i in outputs if i['current_workspace'] != None]
    outputs.sort(key=lambda x: x['name'])
    current_workspace = get_current_workspace()
    for i in range(len(outputs)):
        if outputs[i]['current_workspace'] == current_workspace:
            break
    new_output = outputs[(i + 1) % len(outputs)]
    return new_output


def cmd_focus_next_output(args):
    new_output = get_next_output()
    i3.command('focus', 'output ' + new_output['name'])


def cmd_move_to_next_output(args):
    new_output = get_next_output()
    i3.command('move', args.moved_object + ' to output ' + new_output['name'])
    if args.follow_focus:
        # FIXME not working
        i3.command('focus', 'output ' + new_output['name'])

if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    subparsers = parser.add_subparsers()

    parser_focus_next_output = subparsers.add_parser('focus-next-output')
    parser_focus_next_output.set_defaults(handler=cmd_focus_next_output)

    parser_move_to_next_output = subparsers.add_parser('move-container-to-next-output')
    parser_move_to_next_output.set_defaults(handler=cmd_move_to_next_output, moved_object='container')
    parser_move_to_next_output.add_argument('--follow-focus', default=False, action='store_true')

    parser_move_to_next_output = subparsers.add_parser('move-workspace-to-next-output')
    parser_move_to_next_output.set_defaults(handler=cmd_move_to_next_output, moved_object='workspace')
    parser_move_to_next_output.add_argument('--follow-focus', default=False, action='store_true')

    parsed = parser.parse_args()
    parsed.handler(parsed)